@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using NE.Standard.Design
@using NE.Standard.Design.Models
@using NE.Standard.Design.Elements
@using NE.Standard.Design.Elements.Base
@using System.Collections.Generic

@page "/"
@implements IUIRequest
@implements IHandleEvent

@inject IUIApp App

@code {
    [Parameter] public string SessionId { get; set; } = "session";

    [Inject] private BindingContext BindingContext { get; set; } = default!;

    private UIPageResult? _result;
    private string? _current;

    protected override async Task OnParametersSetAsync()
    {
        if (App != null && _result == null)
        {
            await NavigateAsync(_current ?? App.DefaultPage);
        }
    }

    public async Task NavigateAsync(string key)
    {
        if (App == null)
            return;

        WebDefaultRenderers.Init();
        BindingContext.Clear();

        _current = key;
        _result = await App.NavigateAsync(key, SessionId, this);

        StateHasChanged();
    }

    public async Task HandleAction(string action, object[]? parameters)
    {
        if (_result?.Model != null)
            await _result.Model.InvokeActionAsync(action, parameters);
    }

    private RenderFragment RenderLayout(IUILayout? layout) => builder =>
    {
        if (_result == null || layout == null)
            return;

        builder.AddContent(0, WebRendererRegistry.Render(layout, _result, BindingContext, this));
    };

    void IUIRequest.RequestSync(List<UpdateProperty> updates)
    {
        foreach (var update in updates)
            _ = BindingContext.ApplyUpdateAsync(update);
    }

    bool IUIRequest.RequestNavigate(string key) { _ = NavigateAsync(key); return true; }
    bool IUIRequest.RequestOpenDialog(string id) => false;
    bool IUIRequest.RequestNotification(UINotification notification) => false;
}


@if (_result?.Layout != null)
{
    <style>
        @CssGenerator.GenerateRootCss(_result.Style)
    </style>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        html, body {
            font-family: sans-serif;
            font-size: var(--font-default);
            background-color: var(--color-background);
            color: var(--color-foreground);
            overflow: hidden;
            height: 100vh;
            width: 100vw;
        }

        .root {
            overflow-y: auto;
        }

        .UIGrid, .root {
            width: 100%;
            height: 100%;
        }

        h1 {
            font-size: var(--font-title);
            margin-bottom: 0.5em;
        }

        h2 {
            font-size: var(--font-header);
            margin-bottom: 0.4em;
        }

        h3 {
            font-size: var(--font-default);
            margin-bottom: 0.3em;
        }

        button {
            font-size: var(--font-default);
            padding: 0.5em 1em;
            background-color: var(--color-primary);
            color: var(--color-foreground);
            border: none;
            border-radius: var(--radius-button);
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

            button:hover {
                background-color: var(--color-accent);
            }

        input, textarea, select {
            font-size: var(--font-default);
            padding: 0.5em;
            border: 1px solid var(--color-border);
            border-radius: var(--radius-input);
            background-color: var(--color-background);
            color: var(--color-foreground);
            width: 100%;
        }

            input:focus, textarea:focus, select:focus {
                outline: none;
                border-color: var(--color-accent);
            }

        .card {
            background-color: var(--color-background);
            border: 1px solid var(--color-border);
            border-radius: var(--radius-card);
            padding: 1em;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
        }

        a {
            color: var(--color-primary);
            text-decoration: none;
        }

            a:hover {
                text-decoration: underline;
            }

        .success {
            color: var(--color-success);
        }

        .warning {
            color: var(--color-warning);
        }

        .error {
            color: var(--color-error);
        }
    </style>
    @RenderLayout(_result.Layout.Content)
}