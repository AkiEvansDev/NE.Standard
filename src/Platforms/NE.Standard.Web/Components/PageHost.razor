@using System.Collections.Generic
@using System.Text.Encodings.Web
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Html
@using Microsoft.JSInterop
@using NE.Standard.Design
@using NE.Standard.Design.Elements
@using NE.Standard.Design.Elements.Base
@using NE.Standard.Design.Models
@using NE.Standard.Extensions
@using NE.Standard.Web.Renders
@using NE.Standard.Web.Renders.Binding
@using static Microsoft.AspNetCore.Components.Web.RenderMode

@rendermode InteractiveServer
@page "/{*link}"
@inject IApp App
@inject IUserContextProvider ContextProvider
@inject IClientBridge ClientBridge
@inject IDataBuilder BindingBuilder
@inject IJSRuntime JS

<HeadContent>
    <style>
        @CssGenerator.GenerateRootCss(App.DefaultStyle)
    </style>
</HeadContent>

@code {
    [Parameter]
    public string? Link { get; set; }

    private string? _current;
    private ServerNavigateResult? _result;

    protected override async Task OnInitializedAsync()
    {
        _current = Link.IsNull() ? App.HomePage : Link;
        _result = await App.NavigateAsync(_current!, ContextProvider, ClientBridge);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("designInterop.initBindings", BindingBuilder.Bindings);
    }

    private RenderFragment RenderLayout(IUILayout? layout) => builder =>
    {
        if (layout == null)
            return;

        builder.AddContent(0, WebRendererRegistry.Render(layout, _result!.Context!.Model!, BindingBuilder, this));
    };
}

@if (_result?.Success == true)
{
    @RenderLayout(_result.Context!.View!.Layout)
}